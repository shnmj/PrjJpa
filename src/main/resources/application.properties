spring.application.name=PrjJpa05

server.port=9090
# utf-8 encoding
server.servlet.encoding.force=true

spring.jpa.database=oracle
#spring.jpa.database-platform=org.hibernate.dialect.Oracle19cDialect

# JPA 로깅 설정
# 디버그 레벨로 쿼리 출력
logging.level.org.hibernate.SQL=DEBUG
# 매개변수 값 보여 주기(? 값의 type 을 다음줄에 출력)
logging.level.org.hibernate.orm.jdbc.bind=trace
# 쿼리 줄바꿈하기
spring.jpa.properties.hibernate.format_sql=true

# 기존 DB 가 없으면 생성 있으면 그냥사용(개발 단계옵션) - update
# 새로 셍성된다                                         - create
spring.jpa.hibernate.ddl-auto=create
# spring.jpa.hibernate.ddl-auto=update

# create 할때 미리 초기데이터를 입력 data.sql 실행 초기화 
# 자동으로 data.sql 실행 = true
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

# datasource 설정
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=spring
spring.datasource.password=1234 

# Mustache 템플릿: /templates/mustache/*.mustache
# Thymeleaf 템플릿: /templates/thymeleaf/*.html
# spring.mvc.view.prefix=/templates/
# spring.mvc.view.suffix=.html

# spring.mustache.prefix=mustache/
# spring.mustache.suffix=.mustache

# spring.thymeleaf.prefix=thymeleaf/
# spring.thymeleaf.suffix=.html

spring.thymeleaf.prefix=classpath:/templates/member/
spring.thymeleaf.suffix=.html

## h2 database web으로 확인
## 프로젝트와 h2 db 를 연결 : http://localhost:9090/h2-console
#  spring.h2.console.enabled=true

## H2 DB 고정 URL 설정
## 유니크 URL 생성하지 않기
#  spring.datasource.generate-unique-name=false
## 고정 URL 설정하기
#  spring.datasource.url=jdbc:h2:mem:testdb
## spring.datasource.url=jdbc:h2:/testdb

#  hibernate.dialect=org.hibernate.dialect.H2Dialect 